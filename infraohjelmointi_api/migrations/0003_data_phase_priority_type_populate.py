# Generated by Django 4.1.3 on 2022-11-25 08:25

from django.db import migrations


def delete_foreign_dependent_data(apps, schema_editor):
    ProjectPhase = apps.get_model("infraohjelmointi_api", "ProjectPhase")
    ProjectType = apps.get_model("infraohjelmointi_api", "ProjectType")
    ProjectPriority = apps.get_model("infraohjelmointi_api", "ProjectPriority")
    Project = apps.get_model("infraohjelmointi_api", "Project")
    ProjectSet = apps.get_model("infraohjelmointi_api", "ProjectSet")
    Task = apps.get_model("infraohjelmointi_api", "Task")

    Task.objects.all().delete()
    Project.objects.all().delete()
    ProjectSet.objects.all().delete()
    ProjectPhase.objects.all().delete()
    ProjectType.objects.all().delete()
    ProjectPriority.objects.all().delete()


def populate_Phase_Type_priority_status(apps, schema_editor):

    phases = [
        "proposal",
        "design",
        "programming",
        "draftInitiation",
        "draftApproval",
        "constructionPlan",
        "constructionWait",
        "construction",
        "warrantyPeriod",
        "completed",
    ]
    types = [
        "projectComplex",
        "street",
        "traffic",
        "sports",
        "omaStadi",
        "projectArea",
        "park",
    ]
    statuses = ["active", "past", "upcomming"]
    priorities = ["low", "medium", "high"]
    ProjectPhase = apps.get_model("infraohjelmointi_api", "ProjectPhase")
    ProjectType = apps.get_model("infraohjelmointi_api", "ProjectType")
    ProjectPriority = apps.get_model("infraohjelmointi_api", "ProjectPriority")
    TaskStatus = apps.get_model("infraohjelmointi_api", "TaskStatus")

    for phase in phases:
        ProjectPhase.objects.create(value=phase)

    for priority in priorities:
        ProjectPriority.objects.create(value=priority)
    for _type in types:
        ProjectType.objects.create(value=_type)
    for status in statuses:
        TaskStatus.objects.create(value=status)


def populate_area_data(apps, schema_editor):
    ProjectArea = apps.get_model("infraohjelmointi_api", "ProjectArea")
    areaNames = [
        "honkasuo",
        "kalasatama",
        "kruunuvuorenranta",
        "kuninkaantammi",
        "lansisatama",
        "malminLentokenttaalue",
        "pasila",
        "ostersundom",
    ]
    for area in areaNames:
        ProjectArea.objects.create(areaName=area, location="Helsinki")


class Migration(migrations.Migration):

    dependencies = [
        (
            "infraohjelmointi_api",
            "0002_budgetitem_person_projectarea_projectphase_and_more",
        ),
    ]

    operations = [
        migrations.RunPython(delete_foreign_dependent_data),
        migrations.RunPython(populate_Phase_Type_priority_status),
        migrations.RunPython(populate_area_data),
    ]
